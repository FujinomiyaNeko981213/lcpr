{"id":874,"fid":"844","name":"比较含退格的字符串","slug":"backspace-string-compare","link":"https://leetcode.cn/problems/backspace-string-compare/description/","percent":47.828101071975496,"level":"Easy","category":"algorithms","en_name":"Backspace String Compare","cn_name":"比较含退格的字符串","totalAC":"250.2K","totalSubmit":"523K","likes":745,"dislikes":0,"desc":"<p>给定 <code>s</code> 和 <code>t</code> 两个字符串，当它们分别被输入到空白的文本编辑器后，如果两者相等，返回 <code>true</code> 。<code>#</code> 代表退格字符。</p>\n\n<p><strong>注意：</strong>如果对空文本输入退格字符，文本继续为空。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"ab#c\", t = \"ad#c\"\n<strong>输出：</strong>true\n<strong>解释：</strong>s 和 t 都会变成 \"ac\"。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"ab##\", t = \"c#d#\"\n<strong>输出：</strong>true\n<strong>解释：</strong>s 和 t 都会变成 \"\"。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"a#c\", t = \"b\"\n<strong>输出：</strong>false\n<strong>解释：</strong>s 会变成 \"c\"，但 t 仍然是 \"b\"。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, t.length &lt;= 200</code></li>\n\t<li><code>s</code> 和 <code>t</code> 只含有小写字母以及字符 <code>'#'</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶：</strong></p>\n\n<ul>\n\t<li>你可以用 <code>O(n)</code> 的时间复杂度和 <code>O(1)</code> 的空间复杂度解决该问题吗？</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool backspaceCompare(string s, string t) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean backspaceCompare(String s, String t) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def backspaceCompare(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def backspaceCompare(self, s: str, t: str) -> bool:"},{"value":"c","text":"C","defaultCode":"bool backspaceCompare(char* s, char* t) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool BackspaceCompare(string s, string t) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar backspaceCompare = function(s, t) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function backspaceCompare(s: string, t: string): boolean {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return Boolean\n     */\n    function backspaceCompare($s, $t) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func backspaceCompare(_ s: String, _ t: String) -> Bool {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun backspaceCompare(s: String, t: String): Boolean {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  bool backspaceCompare(String s, String t) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func backspaceCompare(s string, t string) bool {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @param {String} t\n# @return {Boolean}\ndef backspace_compare(s, t)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def backspaceCompare(s: String, t: String): Boolean = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn backspace_compare(s: String, t: String) -> bool {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (backspace-compare s t)\n  (-> string? string? boolean?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec backspace_compare(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> boolean().\nbackspace_compare(S, T) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec backspace_compare(s :: String.t, t :: String.t) :: boolean\n  def backspace_compare(s, t) do\n    \n  end\nend"}],"testcase":"\"ab#c\"\n\"ad#c\"","testable":true,"templateMeta":{"name":"backspaceCompare","params":[{"name":"s","type":"string"},{"name":"t","type":"string"}],"return":{"type":"boolean"}}}