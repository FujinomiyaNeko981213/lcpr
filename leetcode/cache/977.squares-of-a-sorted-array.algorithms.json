{"id":1019,"fid":"977","name":"有序数组的平方","slug":"squares-of-a-sorted-array","link":"https://leetcode.cn/problems/squares-of-a-sorted-array/description/","percent":68.16580767264519,"level":"Easy","category":"algorithms","en_name":"Squares of a Sorted Array","cn_name":"有序数组的平方","totalAC":"704.1K","totalSubmit":"1M","likes":1002,"dislikes":0,"desc":"<p>给你一个按 <strong>非递减顺序</strong> 排序的整数数组 <code>nums</code>，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。</p>\n\n<ul>\n</ul>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [-4,-1,0,3,10]\n<strong>输出：</strong>[0,1,9,16,100]\n<strong>解释：</strong>平方后，数组变为 [16,1,0,9,100]\n排序后，数组变为 [0,1,9,16,100]</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [-7,-3,2,3,11]\n<strong>输出：</strong>[4,9,9,49,121]\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code><span>1 <= nums.length <= </span>10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> <= nums[i] <= 10<sup>4</sup></code></li>\n\t<li><code>nums</code> 已按 <strong>非递减顺序</strong> 排序</li>\n</ul>\n\n<p> </p>\n\n<p><strong>进阶：</strong></p>\n\n<ul>\n\t<li>请你<span style=\"color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;\">设计时间复杂度为 <code>O(n)</code> 的算法解决本问题</span></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> sortedSquares(vector<int>& nums) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] sortedSquares(int[] nums) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def sortedSquares(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def sortedSquares(self, nums: List[int]) -> List[int]:"},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* sortedSquares(int* nums, int numsSize, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] SortedSquares(int[] nums) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar sortedSquares = function(nums) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function sortedSquares(nums: number[]): number[] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function sortedSquares($nums) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func sortedSquares(_ nums: [Int]) -> [Int] {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun sortedSquares(nums: IntArray): IntArray {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<int> sortedSquares(List<int> nums) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func sortedSquares(nums []int) []int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {Integer[]}\ndef sorted_squares(nums)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def sortedSquares(nums: Array[Int]): Array[Int] = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn sorted_squares(nums: Vec<i32>) -> Vec<i32> {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (sorted-squares nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec sorted_squares(Nums :: [integer()]) -> [integer()].\nsorted_squares(Nums) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec sorted_squares(nums :: [integer]) :: [integer]\n  def sorted_squares(nums) do\n    \n  end\nend"}],"testcase":"[-4,-1,0,3,10]","testable":true,"templateMeta":{"name":"sortedSquares","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer[]"}}}