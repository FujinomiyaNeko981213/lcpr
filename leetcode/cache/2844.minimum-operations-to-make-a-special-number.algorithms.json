{"id":3046,"fid":"2844","name":"生成特殊数字的最少操作","slug":"minimum-operations-to-make-a-special-number","link":"https://leetcode.cn/problems/minimum-operations-to-make-a-special-number/description/","percent":41.894897817322395,"level":"Medium","category":"algorithms","en_name":"Minimum Operations to Make a Special Number","cn_name":"生成特殊数字的最少操作","totalAC":"9.2K","totalSubmit":"19.4K","likes":26,"dislikes":0,"desc":"<p>给你一个下标从 <strong>0</strong> 开始的字符串 <code>num</code> ，表示一个非负整数。</p>\n\n<p>在一次操作中，您可以选择 <code>num</code> 的任意一位数字并将其删除。请注意，如果你删除 <code>num</code> 中的所有数字，则 <code>num</code> 变为 <code>0</code>。</p>\n\n<p>返回最少需要多少次操作可以使 <code>num</code> 变成特殊数字。</p>\n\n<p>如果整数 <code>x</code> 能被 <code>25</code> 整除，则该整数 <code>x</code> 被认为是特殊数字。</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>num = \"2245047\"\n<strong>输出：</strong>2\n<strong>解释：</strong>删除数字 num[5] 和 num[6] ，得到数字 \"22450\" ，可以被 25 整除。\n可以证明要使数字变成特殊数字，最少需要删除 2 位数字。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>num = \"2908305\"\n<strong>输出：</strong>3\n<strong>解释：</strong>删除 num[3]、num[4] 和 num[6] ，得到数字 \"2900\" ，可以被 25 整除。\n可以证明要使数字变成特殊数字，最少需要删除 3 位数字。</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>num = \"10\"\n<strong>输出：</strong>1\n<strong>解释：</strong>删除 num[0] ，得到数字 \"0\" ，可以被 25 整除。\n可以证明要使数字变成特殊数字，最少需要删除 1 位数字。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num.length &lt;= 100</code></li>\n\t<li><code>num</code> 仅由数字 <code>'0'</code> 到 <code>'9'</code> 组成</li>\n\t<li><code>num</code> 不含任何前导零</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int minimumOperations(string num) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int minimumOperations(String num) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def minimumOperations(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def minimumOperations(self, num: str) -> int:"},{"value":"c","text":"C","defaultCode":"int minimumOperations(char* num){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MinimumOperations(string num) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} num\n * @return {number}\n */\nvar minimumOperations = function(num) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function minimumOperations(num: string): number {\n\n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $num\n     * @return Integer\n     */\n    function minimumOperations($num) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minimumOperations(_ num: String) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun minimumOperations(num: String): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int minimumOperations(String num) {\n\n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func minimumOperations(num string) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} num\n# @return {Integer}\ndef minimum_operations(num)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def minimumOperations(num: String): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn minimum_operations(num: String) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (minimum-operations num)\n  (-> string? exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec minimum_operations(Num :: unicode:unicode_binary()) -> integer().\nminimum_operations(Num) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec minimum_operations(num :: String.t) :: integer\n  def minimum_operations(num) do\n\n  end\nend"}],"testcase":"\"2245047\"","testable":true,"templateMeta":{"name":"minimumOperations","params":[{"name":"num","type":"string"}],"return":{"type":"integer"}}}