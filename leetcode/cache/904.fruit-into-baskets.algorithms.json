{"id":940,"fid":"904","name":"水果成篮","slug":"fruit-into-baskets","link":"https://leetcode.cn/problems/fruit-into-baskets/description/","percent":45.08329567236516,"level":"Medium","category":"algorithms","en_name":"Fruit Into Baskets","cn_name":"水果成篮","totalAC":"174.5K","totalSubmit":"386.9K","likes":657,"dislikes":0,"desc":"<p>你正在探访一家农场，农场从左到右种植了一排果树。这些树用一个整数数组 <code>fruits</code> 表示，其中 <code>fruits[i]</code> 是第 <code>i</code> 棵树上的水果 <strong>种类</strong> 。</p>\n\n<p>你想要尽可能多地收集水果。然而，农场的主人设定了一些严格的规矩，你必须按照要求采摘水果：</p>\n\n<ul>\n\t<li>你只有 <strong>两个</strong> 篮子，并且每个篮子只能装 <strong>单一类型</strong> 的水果。每个篮子能够装的水果总量没有限制。</li>\n\t<li>你可以选择任意一棵树开始采摘，你必须从 <strong>每棵</strong> 树（包括开始采摘的树）上 <strong>恰好摘一个水果</strong> 。采摘的水果应当符合篮子中的水果类型。每采摘一次，你将会向右移动到下一棵树，并继续采摘。</li>\n\t<li>一旦你走到某棵树前，但水果不符合篮子的水果类型，那么就必须停止采摘。</li>\n</ul>\n\n<p>给你一个整数数组 <code>fruits</code> ，返回你可以收集的水果的 <strong>最大</strong> 数目。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>fruits = [<em><strong>1,2,1</strong></em>]\n<strong>输出：</strong>3\n<strong>解释：</strong>可以采摘全部 3 棵树。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>fruits = [0,<em><strong>1,2,2</strong></em>]\n<strong>输出：</strong>3\n<strong>解释：</strong>可以采摘 [1,2,2] 这三棵树。\n如果从第一棵树开始采摘，则只能采摘 [0,1] 这两棵树。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>fruits = [1,<em><strong>2,3,2,2</strong></em>]\n<strong>输出：</strong>4\n<strong>解释：</strong>可以采摘 [2,3,2,2] 这四棵树。\n如果从第一棵树开始采摘，则只能采摘 [1,2] 这两棵树。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre>\n<strong>输入：</strong>fruits = [3,3,3,<em><strong>1,2,1,1,2</strong></em>,3,3,4]\n<strong>输出：</strong>5\n<strong>解释：</strong>可以采摘 [1,2,1,1,2] 这五棵树。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= fruits.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= fruits[i] &lt; fruits.length</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int totalFruit(vector<int>& fruits) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int totalFruit(int[] fruits) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def totalFruit(self, fruits):\n        \"\"\"\n        :type fruits: List[int]\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def totalFruit(self, fruits: List[int]) -> int:"},{"value":"c","text":"C","defaultCode":"int totalFruit(int* fruits, int fruitsSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int TotalFruit(int[] fruits) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} fruits\n * @return {number}\n */\nvar totalFruit = function(fruits) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function totalFruit(fruits: number[]): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $fruits\n     * @return Integer\n     */\n    function totalFruit($fruits) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func totalFruit(_ fruits: [Int]) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun totalFruit(fruits: IntArray): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int totalFruit(List<int> fruits) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func totalFruit(fruits []int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} fruits\n# @return {Integer}\ndef total_fruit(fruits)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def totalFruit(fruits: Array[Int]): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn total_fruit(fruits: Vec<i32>) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (total-fruit fruits)\n  (-> (listof exact-integer?) exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec total_fruit(Fruits :: [integer()]) -> integer().\ntotal_fruit(Fruits) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec total_fruit(fruits :: [integer]) :: integer\n  def total_fruit(fruits) do\n    \n  end\nend"}],"testcase":"[1,2,1]","testable":true,"templateMeta":{"name":"totalFruit","params":[{"name":"fruits","type":"integer[]"}],"return":{"type":"integer"}}}